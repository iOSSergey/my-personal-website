name: CI/CD Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-22.04

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up SSH key
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Copy files to server
      - name: Deploy to Server
        env:
          USERNAME: ${{ secrets.USERNAME }}
          SERVER: ${{ secrets.SERVER }}
        run: |
          rsync -avz --delete \
            --exclude='.git' --exclude='.git/*' \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ $USERNAME@$SERVER:~/dev/my-personal-website

      # Create .env file on the server using export
      - name: Create .env file
        env:
          USERNAME: ${{ secrets.USERNAME }}
          SERVER: ${{ secrets.SERVER }}
          DEBUG: ${{ secrets.DEBUG }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$SERVER << 'EOF'
          export DEBUG="${{ secrets.DEBUG }}"
          export SECRET_KEY="${{ secrets.SECRET_KEY }}"
          export DATABASE_NAME="${{ secrets.DATABASE_NAME }}"
          export DATABASE_USER="${{ secrets.DATABASE_USER }}"
          export DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}"
          export DATABASE_HOST="${{ secrets.DATABASE_HOST }}"
          export DATABASE_PORT="${{ secrets.DATABASE_PORT }}"

          cat <<EOT > ~/dev/my-personal-website/client_management_system.env
          DEBUG=$DEBUG
          SECRET_KEY=$SECRET_KEY
          DATABASE_NAME=$DATABASE_NAME
          DATABASE_USER=$DATABASE_USER
          DATABASE_PASSWORD=$DATABASE_PASSWORD
          DATABASE_HOST=$DATABASE_HOST
          DATABASE_PORT=$DATABASE_PORT
          EOT
          EOF

      # Copy SSL certificates
      - name: Copy SSL certificates
        env:
          USERNAME: ${{ secrets.USERNAME }}
          SERVER: ${{ secrets.SERVER }}
        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$SERVER << 'EOF'
          mkdir -p ~/dev/my-personal-website/ssl
          cp /etc/letsencrypt/live/pavlyuk.online/fullchain.pem ~/dev/my-personal-website/ssl/fullchain.pem
          cp /etc/letsencrypt/live/pavlyuk.online/privkey.pem ~/dev/my-personal-website/ssl/privkey.pem
          EOF

      # Stop Nginx and Gunicorn
      - name: Stop Nginx and Gunicorn
        env:
          USERNAME: ${{ secrets.USERNAME }}
          SERVER: ${{ secrets.SERVER }}
        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$SERVER << 'EOF'
          sudo systemctl stop nginx
          sudo systemctl stop gunicorn
          EOF

      # Update and restart Docker Compose
      - name: Update and Restart Docker Compose
        env:
          USERNAME: ${{ secrets.USERNAME }}
          SERVER: ${{ secrets.SERVER }}
        run: |
          ssh -o StrictHostKeyChecking=no $USERNAME@$SERVER << 'EOF'
          cd ~/dev/my-personal-website
          docker compose pull
          docker compose up --build -d
          EOF